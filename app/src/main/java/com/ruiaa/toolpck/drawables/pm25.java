package com.ruiaa.toolpck.drawables;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;

import com.github.megatronking.svg.support.SVGRenderer;

/**
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 * 
 * This class was automatically generated by the
 * SVG-Generator. It should not be modified by hand.
 */
public class pm25 extends SVGRenderer {

    public pm25(Context context) {
        super(context);
        mAlpha = 1.0f;
        mWidth = (int)128.0f;
        mHeight = (int)128.0f;
    }

    @Override
    public void render(Canvas canvas, int w, int h, ColorFilter filter) {
        
        final float scaleX = w / 1024.0f;
        final float scaleY = h / 1024.0f;
        
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(332.831f, 652.526f);
        mPath.rLineTo(-15.862f, 0f);
        mPath.rLineTo(0f, 31.304f);
        mPath.rLineTo(15.933f, 0f);
        mPath.rCubicTo(6.077f, 0.0f, 10.342f, -1.592f, 12.795f, -4.762f);
        mPath.rCubicTo(2.452f, -3.169f, 3.676f, -6.799f, 3.676f, -10.89f);
        mPath.rCubicTo(0.0f, -4.792f, -1.367f, -8.591f, -4.101f, -11.418f);
        mPath.rCubicTo(-2.729f, -2.816f, -6.876f, -4.234f, -12.442f, -4.234f);
        mPath.close();
        mPath.moveTo(332.831f, 652.526f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        if (mFillPaint == null) {
            mFillPaint = new Paint();
            mFillPaint.setStyle(Paint.Style.FILL);
            mFillPaint.setAntiAlias(true);
        }
        mFillPaint.setColor(applyAlpha(-16777216, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(733.722f, 436.016f);
        mPath.rCubicTo(-1.198f, -39.818f, -15.288f, -76.672f, -38.574f, -107.213f);
        mPath.rLineTo(65.792f, -64.461f);
        mPath.rCubicTo(0.005f, -0.005f, 0.01f, -0.015f, 0.02f, -0.02f);
        mPath.rCubicTo(0.01f, -0.01f, 0.02f, -0.015f, 0.026f, -0.026f);
        mPath.rLineTo(0.589f, -0.573f);
        mPath.rLineTo(-0.041f, -0.041f);
        mPath.rCubicTo(7.532f, -8.233f, 5.268f, -23.265f, -5.33f, -34.089f);
        mPath.rCubicTo(-10.604f, -10.819f, -25.58f, -13.384f, -33.97f, -6.016f);
        mPath.rLineTo(-0.082f, -0.078f);
        mPath.rLineTo(-66.995f, 65.638f);
        mPath.rCubicTo(-32.051f, -24.12f, -71.844f, -39.9f, -115.446f, -43.761f);
        mPath.rLineTo(0f, -91.786f);
        mPath.rCubicTo(0.0f, -0.01f, 0.0f, -0.02f, 0.0f, -0.036f);
        mPath.rCubicTo(0.0f, -0.015991211f, 0.0f, -0.026f, 0.0f, -0.036f);
        mPath.rLineTo(0f, -0.82f);
        mPath.rLineTo(-0.056f, 0f);
        mPath.rCubicTo(-0.61f, -11.146f, -12.928f, -20.05f, -28.078f, -20.05f);
        mPath.rCubicTo(-15.150024f, 0.0f, -27.464f, 8.904f, -28.073f, 20.05f);
        mPath.rLineTo(-0.108f, 0f);
        mPath.rLineTo(0f, 94.438f);
        mPath.rCubicTo(-37.596f, 5.714f, -71.89f, 20.342f, -100.214f, 41.467f);
        mPath.rLineTo(-60.698f, -65.024f);
        mPath.rCubicTo(0.0f, -0.005f, -0.01f, -0.015f, -0.02f, -0.026f);
        mPath.rCubicTo(-0.009979248f, -0.011001587f, -0.02f, -0.015f, -0.031f, -0.026f);
        mPath.rLineTo(-0.552f, -0.599f);
        mPath.rLineTo(-0.036f, 0.036f);
        mPath.rCubicTo(-8.049f, -7.731f, -23.137f, -5.837f, -34.212f, 4.5f);
        mPath.rCubicTo(-11.075f, 10.342f, -14.003f, 25.257f, -6.845f, 33.818f);
        mPath.rLineTo(-0.082f, 0.076f);
        mPath.rLineTo(62.295f, 66.739f);
        mPath.rCubicTo(-21.412f, 27.827f, -35.149f, 60.943f, -38.42f, 96.809f);
        mPath.rLineTo(-83.553f, 0f);
        mPath.rCubicTo(-0.01f, 0.0f, -0.02f, 0.0f, -0.036f, 0.0f);
        mPath.rCubicTo(-0.015991211f, 0.0f, -0.026f, 0.0f, -0.036f, 0.0f);
        mPath.rLineTo(-0.82f, 0f);
        mPath.rLineTo(0f, 0.056f);
        mPath.rCubicTo(-11.146f, 0.61f, -20.05f, 12.928f, -20.05f, 28.078f);
        mPath.rCubicTo(0.0f, 15.149994f, 8.904f, 27.464f, 20.05f, 28.073f);
        mPath.rLineTo(0f, 0.108f);
        mPath.rLineTo(87.982f, 0f);
        mPath.rCubicTo(2.903f, 13.04f, 7.276f, 25.58f, 12.841f, 37.54f);
        mPath.rCubicTo(-73.021f, 14.26f, -128.128f, 78.551f, -128.128f, 155.74f);
        mPath.rCubicTo(0.0f, 87.45f, 70.717f, 158.362f, 158.08f, 158.71f);
        mPath.rLineTo(0f, 0.01f);
        mPath.rLineTo(302.72f, -0.179f);
        mPath.rCubicTo(111.631f, -3.83f, 200.965f, -95.468f, 200.965f, -208.031f);
        mPath.rCubicTo(-0.005f, -83.784f, -49.526f, -155.971f, -120.873f, -189.0f);
        mPath.close();
        mPath.moveTo(733.722f, 436.016f);
        mPath.moveTo(518.799f, 283.691f);
        mPath.rCubicTo(91.31f, 0.0f, 166.543f, 60.754f, 177.044f, 139.08f);
        mPath.rCubicTo(-15.862f, -3.866f, -32.42f, -5.965f, -49.47f, -5.965f);
        mPath.rCubicTo(-89.046f, 0.0f, -164.998f, 55.916f, -194.755f, 134.534f);
        mPath.rCubicTo(-24.852f, -20.219f, -55.956f, -33.05f, -89.953f, -35.19f);
        mPath.rCubicTo(-13.496f, -22.221f, -21.212f, -47.601f, -21.212f, -74.593f);
        mPath.rCubicTo(0.0f, -87.183f, 79.852f, -157.865f, 178.345f, -157.865f);
        mPath.close();
        mPath.moveTo(518.799f, 283.691f);
        mPath.moveTo(370.98f, 684.352f);
        mPath.rCubicTo(-2.043f, 5.53f, -4.931f, 9.892f, -8.658f, 13.061f);
        mPath.rCubicTo(-3.7269897f, 3.1689453f, -7.342f, 5.268f, -10.839f, 6.308f);
        mPath.rCubicTo(-3.497f, 1.039f, -8.975f, 1.551f, -16.43f, 1.551f);
        mPath.rLineTo(-17.234f, 0f);
        mPath.rLineTo(0f, 43.848f);
        mPath.rLineTo(-24.904f, 0f);
        mPath.rLineTo(0f, -118.042f);
        mPath.rLineTo(41.216f, 0f);
        mPath.rCubicTo(9.196f, 0.0f, 16.23f, 1.111f, 21.104f, 3.328f);
        mPath.rCubicTo(4.873993f, 2.21698f, 9.231f, 6.18f, 13.061f, 11.889f);
        mPath.rCubicTo(3.835f, 5.704f, 5.75f, 12.708f, 5.75f, 21.012f);
        mPath.rCubicTo(0.0f, 5.837f, -1.03f, 11.505f, -3.067f, 17.044f);
        mPath.close();
        mPath.moveTo(370.98f, 684.352f);
        mPath.moveTo(501.668f, 749.125f);
        mPath.rLineTo(-24.668f, 0f);
        mPath.rLineTo(0f, -96.251f);
        mPath.rLineTo(-26.301f, 96.251f);
        mPath.rLineTo(-16.768f, 0f);
        mPath.rLineTo(-25.8f, -96.251f);
        mPath.rLineTo(0f, 96.251f);
        mPath.rLineTo(-20.53f, 0f);
        mPath.rLineTo(0f, -118.042f);
        mPath.rLineTo(38.144f, 0f);
        mPath.rLineTo(18.355f, 70.65f);
        mPath.rLineTo(19.308f, -70.652f);
        mPath.rLineTo(38.267f, 0f);
        mPath.rLineTo(0f, 118.042f);
        mPath.close();
        mPath.moveTo(501.668f, 749.125f);
        mPath.moveTo(595.441f, 749.125f);
        mPath.rLineTo(-78.444f, 0f);
        mPath.rLineTo(0f, -22.922f);
        mPath.rCubicTo(2.554f, -2.192f, 6.764f, -5.622f, 12.641f, -10.291f);
        mPath.rCubicTo(14.351f, -11.53f, 24.796f, -21.028f, 31.329f, -28.488f);
        mPath.rCubicTo(6.538f, -7.47f, 9.81f, -14.31f, 9.81f, -20.541f);
        mPath.rCubicTo(0.0f, -4.562f, -1.306f, -8.315f, -3.912f, -11.284f);
        mPath.rCubicTo(-2.605957f, -2.9689941f, -6.098f, -4.454f, -10.496f, -4.454f);
        mPath.rCubicTo(-10.214f, 0.0f, -16.138f, 7.526f, -17.772f, 22.569f);
        mPath.rLineTo(-21.606f, -5.448f);
        mPath.rCubicTo(4.849f, -25.994f, 18.309f, -38.999f, 40.371f, -38.999f);
        mPath.rCubicTo(12.36f, 0.0f, 21.848f, 3.666f, 28.462f, 10.988f);
        mPath.rCubicTo(6.614f, 7.327f, 9.923f, 16.056f, 9.923f, 26.204f);
        mPath.rCubicTo(0.0f, 10.491f, -3.461f, 19.86f, -10.378f, 28.099f);
        mPath.rCubicTo(-6.922f, 8.248f, -19.651f, 18.591f, -38.184f, 31.048f);
        mPath.rLineTo(50.028f, 0f);
        mPath.rLineTo(-1.772f, 23.521f);
        mPath.close();
        mPath.moveTo(595.441f, 749.125f);
        mPath.moveTo(636.042f, 749.125f);
        mPath.rLineTo(-23.67f, 0f);
        mPath.rLineTo(0f, -26.721f);
        mPath.rLineTo(23.67f, 0f);
        mPath.rLineTo(0f, 26.721f);
        mPath.close();
        mPath.moveTo(636.042f, 749.125f);
        mPath.moveTo(721.418f, 739.223f);
        mPath.rCubicTo(-7.127f, 7.808f, -17.096f, 11.709f, -29.916f, 11.709f);
        mPath.rCubicTo(-22.272f, 0.0f, -36.035f, -11.182f, -41.294f, -33.552f);
        mPath.rLineTo(22.984f, -3.891f);
        mPath.rCubicTo(2.35f, 10.378f, 8.172f, 15.57f, 17.464f, 15.57f);
        mPath.rCubicTo(5.11f, 0.0f, 9.17f, -1.792f, 12.18f, -5.371f);
        mPath.rCubicTo(3.016f, -3.569f, 4.521f, -7.782f, 4.521f, -12.622f);
        mPath.rCubicTo(0.0f, -5.069f, -1.582f, -9.431f, -4.751f, -13.061f);
        mPath.rCubicTo(-3.164f, -3.63f, -7.071f, -5.448f, -11.72f, -5.448f);
        mPath.rCubicTo(-6.487f, 0.0f, -11.489f, 3.062f, -15.017f, 9.17f);
        mPath.rLineTo(-19.948f, -3.722f);
        mPath.rLineTo(4.096f, -66.929f);
        mPath.rLineTo(65.879f, 0f);
        mPath.rLineTo(-2.678f, 24.212f);
        mPath.rLineTo(-45.66f, 0f);
        mPath.rLineTo(-1.684f, 26.291f);
        mPath.rCubicTo(5.622f, -6.738f, 13.051f, -10.122f, 22.292f, -10.122f);
        mPath.rCubicTo(9.446f, 0.0f, 17.464f, 3.512f, 24.054f, 10.511f);
        mPath.rCubicTo(6.584f, 6.999f, 9.882f, 16.041f, 9.882f, 27.11f);
        mPath.rCubicTo(0.0f, 12.283f, -3.558f, 22.322f, -10.685f, 30.141f);
        mPath.close();
        mPath.moveTo(721.418f, 739.223f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        mFillPaint.setColor(applyAlpha(-16777216, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);

    }

}