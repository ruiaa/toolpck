package com.ruiaa.toolpck.drawables;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;

import com.github.megatronking.svg.support.SVGRenderer;

/**
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 * 
 * This class was automatically generated by the
 * SVG-Generator. It should not be modified by hand.
 */
public class protractor extends SVGRenderer {

    public protractor(Context context) {
        super(context);
        mAlpha = 1.0f;
        mWidth = dip2px(1024.0f);
        mHeight = dip2px(1024.0f);
    }

    @Override
    public void render(Canvas canvas, int w, int h, ColorFilter filter) {
        
        final float scaleX = w / 1024.0f;
        final float scaleY = h / 1024.0f;
        
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(924.11664f, 777.6605f);
        mPath.rCubicTo(-22.916943f, 0.0f, -42.7742f, 13.317307f, -52.259224f, 32.615837f);
        mPath.rLineTo(-373.53748f, 0.0f);
        mPath.rCubicTo(9.152451f, -34.678825f, 10.166547f, -68.67408f, 2.982938f, -101.40555f);
        mPath.rCubicTo(-7.346315f, -33.47132f, -23.214724f, -65.54583f, -47.164185f, -95.32916f);
        mPath.rCubicTo(-23.09295f, -28.718065f, -48.99897f, -49.551556f, -67.3448f, -62.33572f);
        mPath.rLineTo(274.65128f, -307.43393f);
        mPath.rCubicTo(5.406127f, 1.663896f, 11.144828f, 2.564405f, 17.089214f, 2.564405f);
        mPath.rCubicTo(32.088837f, 0.0f, 58.196445f, -26.10761f, 58.196445f, -58.19747f);
        mPath.rCubicTo(0.0f, -32.08986f, -26.10761f, -58.19747f, -58.196445f, -58.19747f);
        mPath.rCubicTo(-32.09088f, 0.0f, -58.198494f, 26.10761f, -58.198494f, 58.19747f);
        mPath.rCubicTo(0.0f, 7.257288f, 1.345648f, 14.202467f, 3.784186f, 20.615526f);
        mPath.lineTo(114.268f, 779.4646f);
        mPath.rCubicTo(-4.602831f, -1.174756f, -9.42158f, -1.803066f, -14.384615f, -1.803066f);
        mPath.rCubicTo(-32.08986f, 0.0f, -58.19747f, 26.10761f, -58.19747f, 58.19747f);
        mPath.rCubicTo(0.0f, 32.089844f, 26.10761f, 58.19747f, 58.19747f, 58.19747f);
        mPath.rCubicTo(22.915918f, 0.0f, 42.772152f, -13.317307f, 52.2582f, -32.614815f);
        mPath.rLineTo(719.71686f, 0.0f);
        mPath.rCubicTo(9.486048f, 19.296486f, 29.343306f, 32.613792f, 52.2582f, 32.613792f);
        mPath.rCubicTo(32.088837f, 0.0f, 58.196445f, -26.10761f, 58.196445f, -58.196445f);
        mPath.cubicTo(982.31305f, 803.7681f, 956.2065f, 777.6605f, 924.11664f, 777.6605f);
        mPath.close();
        mPath.moveTo(924.11664f, 777.6605f);
        mPath.moveTo(438.18842f, 626.3678f);
        mPath.rCubicTo(45.063335f, 56.04034f, 58.10128f, 117.81222f, 38.910194f, 183.9096f);
        mPath.lineTo(155.34966f, 810.2774f);
        mPath.rLineTo(217.67462f, -243.65637f);
        mPath.cubicTo(390.23422f, 578.4279f, 415.8036f, 598.53076f, 438.18842f, 626.3678f);
        mPath.close();
        mPath.moveTo(438.18842f, 626.3678f);
        mPath.moveTo(678.5334f, 160.64168f);
        mPath.rCubicTo(15.161305f, 0.0f, 27.497261f, 12.335956f, 27.497261f, 27.498283f);
        mPath.rCubicTo(0.0f, 15.162323f, -12.335956f, 27.498283f, -27.497261f, 27.498283f);
        mPath.rCubicTo(-15.162328f, 0.0f, -27.499308f, -12.335956f, -27.499308f, -27.498283f);
        mPath.cubicTo(651.03406f, 172.97762f, 663.37103f, 160.64168f, 678.5334f, 160.64168f);
        mPath.close();
        mPath.moveTo(678.5334f, 160.64168f);
        mPath.moveTo(99.883385f, 863.35834f);
        mPath.rCubicTo(-15.162328f, 0.0f, -27.498283f, -12.335956f, -27.498283f, -27.498283f);
        mPath.rCubicTo(0.0f, -15.1623535f, 12.335956f, -27.498283f, 27.498283f, -27.498283f);
        mPath.rCubicTo(15.162331f, 0.0f, 27.498283f, 12.335956f, 27.498283f, 27.498283f);
        mPath.cubicTo(127.38167f, 851.0224f, 115.04571f, 863.35834f, 99.883385f, 863.35834f);
        mPath.close();
        mPath.moveTo(99.883385f, 863.35834f);
        mPath.moveTo(924.11664f, 863.3573f);
        mPath.rCubicTo(-15.162328f, 0.0f, -27.499308f, -12.335956f, -27.499308f, -27.497261f);
        mPath.rCubicTo(0.0f, -15.162328f, 12.33698f, -27.499308f, 27.499308f, -27.499308f);
        mPath.rCubicTo(15.161305f, 0.0f, 27.497261f, 12.33698f, 27.497261f, 27.499308f);
        mPath.cubicTo(951.6139f, 851.02136f, 939.27893f, 863.3573f, 924.11664f, 863.3573f);
        mPath.close();
        mPath.moveTo(924.11664f, 863.3573f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        if (mFillPaint == null) {
            mFillPaint = new Paint();
            mFillPaint.setStyle(Paint.Style.FILL);
            mFillPaint.setAntiAlias(true);
        }
        mFillPaint.setColor(applyAlpha(-13882324, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);

    }

}