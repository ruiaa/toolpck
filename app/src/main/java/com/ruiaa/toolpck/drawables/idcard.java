package com.ruiaa.toolpck.drawables;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;

import com.github.megatronking.svg.support.SVGRenderer;

/**
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 * 
 * This class was automatically generated by the
 * SVG-Generator. It should not be modified by hand.
 */
public class idcard extends SVGRenderer {

    public idcard(Context context) {
        super(context);
        mAlpha = 1.0f;
        mWidth = (int)128.0f;
        mHeight = (int)128.0f;
    }

    @Override
    public void render(Canvas canvas, int w, int h, ColorFilter filter) {
        
        final float scaleX = w / 1024.0f;
        final float scaleY = h / 1024.0f;
        
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(377.85532f, 708.45026f);
        mPath.rCubicTo(-41.741684f, 0.0f, -81.26586f, -10.262738f, -111.29273f, -28.89919f);
        mPath.rCubicTo(-32.920784f, -20.433378f, -51.051723f, -48.579414f, -51.051723f, -79.25302f);
        mPath.rCubicTo(0.0f, -26.03598f, 13.615089f, -51.037395f, 38.337143f, -70.39732f);
        mPath.rCubicTo(13.537318f, -10.600429f, 30.26428f, -19.35379f, 48.89664f, -25.743315f);
        mPath.rCubicTo(-15.518438f, -20.435425f, -24.593119f, -47.42001f, -24.593119f, -76.10533f);
        mPath.rCubicTo(0.0f, -29.463032f, 9.388834f, -57.33073f, 26.436092f, -78.471214f);
        mPath.rCubicTo(18.034748f, -22.364357f, 42.389435f, -34.68087f, 68.57891f, -34.68087f);
        mPath.rCubicTo(26.17515f, 0.0f, 50.516533f, 12.31856f, 68.54002f, 34.685986f);
        mPath.rCubicTo(17.033955f, 21.13946f, 26.414602f, 49.00511f, 26.414602f, 78.46507f);
        mPath.rCubicTo(0.0f, 21.409613f, -5.009084f, 42.24822f, -14.485923f, 60.263523f);
        mPath.rCubicTo(-2.491751f, 4.734838f, -5.258771f, 9.221012f, -8.275477f, 13.428847f);
        mPath.rCubicTo(20.394493f, 6.099928f, 38.796608f, 14.96176f, 53.73074f, 26.03905f);
        mPath.rCubicTo(26.508747f, 19.664875f, 41.108257f, 45.418423f, 41.108257f, 72.51455f);
        mPath.rCubicTo(0.0f, 30.674627f, -18.129915f, 58.81964f, -51.049675f, 79.25302f);
        mPath.cubicTo(459.12424f, 698.1875f, 419.59903f, 708.45026f, 377.85532f, 708.45026f);
        mPath.close();
        mPath.moveTo(377.85532f, 708.45026f);
        mPath.moveTo(373.87363f, 529.2611f);
        mPath.rLineTo(-27.463491f, 4.212952f);
        mPath.rCubicTo(-27.175943f, 4.167926f, -51.51119f, 13.800307f, -68.52365f, 27.12273f);
        mPath.rCubicTo(-10.66899f, 8.355295f, -23.38664f, 22.024618f, -23.38664f, 39.70121f);
        mPath.rCubicTo(0.0f, 22.515806f, 20.44054f, 38.565342f, 32.62505f, 46.12655f);
        mPath.rCubicTo(23.935131f, 14.857383f, 56.15802f, 23.038715f, 90.731445f, 23.038715f);
        mPath.rCubicTo(34.57547f, 0.0f, 66.79836f, -8.181333f, 90.73247f, -23.037691f);
        mPath.rCubicTo(12.183484f, -7.563256f, 32.623f, -23.610744f, 32.623f, -46.127575f);
        mPath.rCubicTo(0.0f, -32.003902f, -42.47744f, -61.108776f, -98.80635f, -67.69887f);
        mPath.lineTo(373.87363f, 529.2611f);
        mPath.close();
        mPath.moveTo(373.87363f, 529.2611f);
        mPath.moveTo(373.1665f, 353.8869f);
        mPath.rCubicTo(-14.165628f, 0.0f, -27.74183f, 7.16212f, -38.228672f, 20.167318f);
        mPath.rCubicTo(-11.477402f, 14.232143f, -17.798365f, 33.40788f, -17.798365f, 53.9968f);
        mPath.rCubicTo(0.0f, 29.991058f, 14.244422f, 57.690933f, 35.44528f, 68.92991f);
        mPath.rLineTo(21.39938f, 11.344373f);
        mPath.rLineTo(21.010523f, -12.012591f);
        mPath.rCubicTo(20.738323f, -11.857049f, 34.13852f, -38.6513f, 34.13852f, -68.26169f);
        mPath.rCubicTo(0.0f, -20.590967f, -6.316869f, -39.76977f, -17.785063f, -54.002937f);
        mPath.cubicTo(400.8715f, 361.047f, 387.31168f, 353.8869f, 373.1665f, 353.8869f);
        mPath.close();
        mPath.moveTo(373.1665f, 353.8869f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        if (mFillPaint == null) {
            mFillPaint = new Paint();
            mFillPaint.setStyle(Paint.Style.FILL);
            mFillPaint.setAntiAlias(true);
        }
        mFillPaint.setColor(applyAlpha(-13882324, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(816.89667f, 180.72406f);
        mPath.rCubicTo(57.59065f, 0.0f, 104.44477f, 46.8531f, 104.44477f, 104.44375f);
        mPath.rLineTo(0.0f, 453.01355f);
        mPath.rCubicTo(0.0f, 57.59065f, -46.8531f, 104.44375f, -104.44477f, 104.44375f);
        mPath.lineTo(206.58353f, 842.6251f);
        mPath.rCubicTo(-57.59065f, 0.0f, -104.44375f, -46.8531f, -104.44375f, -104.44375f);
        mPath.lineTo(102.13977f, 285.16782f);
        mPath.rCubicTo(0.0f, -57.59065f, 46.8531f, -104.44375f, 104.44375f, -104.44375f);
        mPath.lineTo(816.89667f, 180.72406f);
        mPath.moveTo(816.89667f, 141.7361f);
        mPath.lineTo(206.58353f, 141.7361f);
        mPath.rCubicTo(-79.21516f, 0.0f, -143.43172f, 64.21656f, -143.43172f, 143.43172f);
        mPath.rLineTo(0.0f, 453.01355f);
        mPath.rCubicTo(0.0f, 79.21516f, 64.21656f, 143.43172f, 143.43172f, 143.43172f);
        mPath.rLineTo(610.3131f, 0.0f);
        mPath.rCubicTo(79.21516f, 0.0f, 143.43274f, -64.21656f, 143.43274f, -143.43172f);
        mPath.lineTo(960.3294f, 285.16782f);
        mPath.cubicTo(960.3294f, 205.95265f, 896.1128f, 141.7361f, 816.89667f, 141.7361f);
        mPath.lineTo(816.89667f, 141.7361f);
        mPath.close();
        mPath.moveTo(816.89667f, 141.7361f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        mFillPaint.setColor(applyAlpha(-13882324, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(650.89386f, 370.30997f);
        mPath.rLineTo(156.41338f, 0.0f);
        mPath.rLineTo(0.0f, 38.987965f);
        mPath.rLineTo(-156.41338f, 0.0f);
        mPath.rLineTo(0.0f, -38.987965f);
        mPath.close();
        mPath.moveTo(650.89386f, 370.30997f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        mFillPaint.setColor(applyAlpha(-13882324, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(650.89386f, 492.1806f);
        mPath.rLineTo(94.84923f, 0.0f);
        mPath.rLineTo(0.0f, 38.987965f);
        mPath.rLineTo(-94.84923f, 0.0f);
        mPath.rLineTo(0.0f, -38.987965f);
        mPath.close();
        mPath.moveTo(650.89386f, 492.1806f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        mFillPaint.setColor(applyAlpha(-13882324, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(650.89386f, 614.0523f);
        mPath.rLineTo(94.84923f, 0.0f);
        mPath.rLineTo(0.0f, 38.987965f);
        mPath.rLineTo(-94.84923f, 0.0f);
        mPath.rLineTo(0.0f, -38.987965f);
        mPath.close();
        mPath.moveTo(650.89386f, 614.0523f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        mFillPaint.setColor(applyAlpha(-13882324, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);

    }

}