package com.ruiaa.toolpck.drawables;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;

import com.github.megatronking.svg.support.SVGRenderer;

/**
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 * 
 * This class was automatically generated by the
 * SVG-Generator. It should not be modified by hand.
 */
public class time_countdown extends SVGRenderer {

    public time_countdown(Context context) {
        super(context);
        mAlpha = 1.0f;
        mWidth = (int)128.0f;
        mHeight = (int)128.0f;
    }

    @Override
    public void render(Canvas canvas, int w, int h, ColorFilter filter) {
        
        final float scaleX = w / 1024.0f;
        final float scaleY = h / 1024.0f;
        
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(510.6087f, 1019.44763f);
        mPath.rCubicTo(-99.59513f, 0.0f, -199.20139f, 0.144696f, -298.7965f, -0.211478f);
        mPath.rCubicTo(-10.774261f, -0.077913f, -22.26087f, -1.29113f, -32.100174f, -5.320348f);
        mPath.rCubicTo(-18.95513f, -7.746783f, -27.570087f, -24.05287f, -25.922783f, -43.94296f);
        mPath.rCubicTo(1.647304f, -20.96974f, 18.376348f, -39.067825f, 38.199654f, -38.778435f);
        mPath.rCubicTo(21.982609f, 0.367304f, 25.421913f, -10.262261f, 25.05461f, -28.371477f);
        mPath.rCubicTo(-0.645565f, -33.669563f, 0.289391f, -67.35026f, -0.066783f, -101.03096f);
        mPath.rCubicTo(-0.356174f, -34.82713f, 12.855652f, -63.621567f, 35.973564f, -89.17704f);
        mPath.rCubicTo(43.23061f, -47.771828f, 86.03826f, -95.94435f, 128.46748f, -144.41739f);
        mPath.rCubicTo(30.875826f, -35.261215f, 31.087303f, -64.85704f, 0.645565f, -99.52835f);
        mPath.rCubicTo(-42.44035f, -48.47304f, -85.15896f, -96.72348f, -128.53426f, -144.40627f);
        mPath.rCubicTo(-23.774609f, -26.145391f, -37.13113f, -55.51861f, -36.697044f, -91.136f);
        mPath.rCubicTo(0.434087f, -34.404175f, -0.289391f, -68.87513f, 0.0f, -103.26817f);
        mPath.rCubicTo(0.144696f, -15.226435f, -2.949565f, -24.56487f, -21.76f, -24.631653f);
        mPath.rCubicTo(-22.617043f, -0.144696f, -39.557564f, -18.242783f, -41.93948f, -40.21426f);
        mPath.rCubicTo(-2.081391f, -19.311304f, 12.499478f, -39.490784f, 33.892174f, -45.312f);
        mPath.rCubicTo(8.336696f, -2.226087f, 17.307825f, -2.871652f, 25.922783f, -2.871652f);
        mPath.cubicTo(412.14886f, 16.695652f, 611.3503f, 16.695652f, 810.47375f, 16.762436f);
        mPath.rCubicTo(7.257043f, 0.0f, 14.725565f, 0.222609f, 21.76f, 1.869913f);
        mPath.rCubicTo(22.53913f, 5.38713f, 38.566956f, 25.499826f, 37.13113f, 45.456696f);
        mPath.rCubicTo(-1.647304f, 22.116175f, -19.533913f, 40.42574f, -43.52f, 41.216f);
        mPath.rCubicTo(-15.649391f, 0.512f, -20.546783f, 7.112348f, -20.390957f, 21.403826f);
        mPath.rCubicTo(0.222609f, 34.393044f, -0.656696f, 68.864f, 0.077913f, 103.25704f);
        mPath.rCubicTo(0.712348f, 37.20904f, -12.566261f, 68.00696f, -37.632f, 95.22087f);
        mPath.rCubicTo(-40.147476f, 43.664696f, -78.13565f, 89.33287f, -118.928696f, 132.352f);
        mPath.rCubicTo(-39.84696f, 41.93948f, -40.292175f, 78.9927f, 0.790261f, 122.000694f);
        mPath.rCubicTo(40.92661f, 42.874435f, 78.92591f, 88.53148f, 118.917564f, 132.352f);
        mPath.rCubicTo(23.774609f, 26.07861f, 37.13113f, 55.429565f, 36.685913f, 91.12487f);
        mPath.rCubicTo(-0.422957f, 34.404175f, 0.300522f, 68.87513f, 0.0f, 103.26817f);
        mPath.rCubicTo(-0.122435f, 15.226435f, 2.971826f, 24.55374f, 21.77113f, 24.698435f);
        mPath.rCubicTo(22.483479f, 0.144696f, 39.858086f, 18.532173f, 42.084175f, 40.13635f);
        mPath.rCubicTo(1.925565f, 18.242783f, -11.998609f, 38.722782f, -31.888697f, 44.677567f);
        mPath.rCubicTo(-8.904348f, 2.649043f, -18.67687f, 3.506087f, -28.004173f, 3.506087f);
        mPath.cubicTo(709.79895f, 1019.5256f, 610.2038f, 1019.44763f, 510.6087f, 1019.44763f);
        mPath.lineTo(510.6087f, 1019.44763f);
        mPath.close();
        mPath.moveTo(510.6087f, 1019.44763f);
        mPath.moveTo(510.67548f, 930.25946f);
        mPath.rCubicTo(61.46226f, 0.0f, 123.00243f, -0.434087f, 184.47583f, 0.278261f);
        mPath.rCubicTo(16.740173f, 0.233739f, 24.05287f, -5.019826f, 23.552f, -22.472347f);
        mPath.rCubicTo(-0.857043f, -32.178085f, 1.213217f, -64.48974f, -0.934957f, -96.57878f);
        mPath.rCubicTo(-0.923826f, -13.512348f, -6.733913f, -28.95026f, -15.437913f, -39.15687f);
        mPath.rCubicTo(-42.150955f, -49.60835f, -85.88244f, -97.9367f, -129.32452f, -146.48766f);
        mPath.rCubicTo(-58.457043f, -65.25774f, -58.10087f, -151.08452f, 0.712348f, -216.4313f);
        mPath.rCubicTo(43.586784f, -48.40626f, 87.16244f, -96.8793f, 129.3913f, -146.42087f);
        mPath.rCubicTo(8.258783f, -9.694609f, 13.935304f, -24.486958f, 14.725565f, -37.264694f);
        mPath.rCubicTo(2.014609f, -32.82365f, 0.222609f, -65.85878f, 0.857043f, -98.80487f);
        mPath.rCubicTo(0.356174f, -16.384f, -6.678261f, -21.392696f, -22.416697f, -21.325912f);
        mPath.cubicTo(573.2953f, 106.02852f, 450.3485f, 106.18435f, 327.3461f, 105.52765f);
        mPath.rCubicTo(-18.888348f, -0.066783f, -24.05287f, 7.390609f, -23.618784f, 24.765217f);
        mPath.rCubicTo(0.857043f, 30.018784f, -1.658435f, 60.182262f, 1.001739f, 89.97843f);
        mPath.rCubicTo(1.369043f, 15.582609f, 7.112348f, 33.469215f, 16.940521f, 45.167305f);
        mPath.rCubicTo(41.861565f, 49.90887f, 86.09391f, 97.81426f, 129.25774f, 146.49878f);
        mPath.rCubicTo(55.07339f, 62.185738f, 56.15304f, 148.56905f, 2.148174f, 209.75304f);
        mPath.rCubicTo(-38.199654f, 43.375305f, -75.89844f, 87.32939f, -115.901215f, 129.04626f);
        mPath.rCubicTo(-24.409042f, 25.433043f, -37.91026f, 52.26852f, -33.602783f, 88.18643f);
        mPath.rCubicTo(2.226087f, 18.754784f, 0.356174f, 37.977043f, 0.434087f, 57.010086f);
        mPath.rCubicTo(0.066783f, 34.25948f, 0.066783f, 34.32626f, 33.235477f, 34.32626f);
        mPath.cubicTo(394.98575f, 930.3374f, 452.7972f, 930.25946f, 510.67548f, 930.25946f);
        mPath.lineTo(510.67548f, 930.25946f);
        mPath.close();
        mPath.moveTo(510.67548f, 930.25946f);
        mPath.moveTo(510.67548f, 930.25946f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        if (mFillPaint == null) {
            mFillPaint = new Paint();
            mFillPaint.setStyle(Paint.Style.FILL);
            mFillPaint.setAntiAlias(true);
        }
        mFillPaint.setColor(applyAlpha(-13882324, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);

    }

}