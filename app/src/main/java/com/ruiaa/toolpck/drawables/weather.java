package com.ruiaa.toolpck.drawables;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;

import com.github.megatronking.svg.support.SVGRenderer;

/**
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 * 
 * This class was automatically generated by the
 * SVG-Generator. It should not be modified by hand.
 */
public class weather extends SVGRenderer {

    public weather(Context context) {
        super(context);
        mAlpha = 1.0f;
        mWidth = (int)128.0f;
        mHeight = (int)128.0f;
    }

    @Override
    public void render(Canvas canvas, int w, int h, ColorFilter filter) {
        
        final float scaleX = w / 1024.0f;
        final float scaleY = h / 1024.0f;
        
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(232.23424f, 511.94882f);
        mPath.rCubicTo(0.0f, -15.451584f, -12.484061f, -27.935644f, -27.935644f, -27.935644f);
        mPath.lineTo(92.24902f, 484.01318f);
        mPath.cubicTo(76.79744f, 484.01318f, 64.31338f, 496.49725f, 64.31338f, 511.94882f);
        mPath.rCubicTo(0.0f, 15.451584f, 12.484061f, 27.935644f, 27.935644f, 27.935644f);
        mPath.rLineTo(111.947235f, 0.0f);
        mPath.cubicTo(219.64784f, 539.88446f, 232.23424f, 527.4004f, 232.23424f, 511.94882f);
        mPath.lineTo(232.23424f, 511.94882f);
        mPath.close();
        mPath.moveTo(232.23424f, 511.94882f);
        mPath.moveTo(274.59818f, 314.04578f);
        mPath.rCubicTo(10.949136f, 10.949136f, 28.651943f, 10.949136f, 39.601078f, 0.0f);
        mPath.rCubicTo(10.949136f, -10.949136f, 10.949136f, -28.651943f, 0.0f, -39.601078f);
        mPath.rLineTo(-79.09983f, -79.09983f);
        mPath.rCubicTo(-10.949136f, -10.949136f, -28.651943f, -10.949136f, -39.601078f, 0.0f);
        mPath.rCubicTo(-10.949136f, 10.949136f, -10.949136f, 28.651943f, 0.0f, 39.601078f);
        mPath.lineTo(274.59818f, 314.04578f);
        mPath.lineTo(274.59818f, 314.04578f);
        mPath.close();
        mPath.moveTo(274.59818f, 314.04578f);
        mPath.moveTo(512.0f, 232.18307f);
        mPath.rCubicTo(15.451584f, 0.0f, 27.935644f, -12.484061f, 27.935644f, -27.935644f);
        mPath.lineTo(539.93567f, 92.30019f);
        mPath.rCubicTo(0.0f, -15.451584f, -12.484061f, -27.935644f, -27.935644f, -27.935644f);
        mPath.rCubicTo(-15.451584f, 0.0f, -27.935644f, 12.484061f, -27.935644f, 27.935644f);
        mPath.rLineTo(0.0f, 111.947235f);
        mPath.cubicTo(483.96204f, 219.59668f, 496.5484f, 232.18307f, 512.0f, 232.18307f);
        mPath.lineTo(512.0f, 232.18307f);
        mPath.close();
        mPath.moveTo(512.0f, 232.18307f);
        mPath.moveTo(274.59818f, 709.8519f);
        mPath.rLineTo(-79.09983f, 79.09983f);
        mPath.rCubicTo(-10.949136f, 10.949136f, -10.949136f, 28.651943f, 0.0f, 39.601078f);
        mPath.rCubicTo(10.949136f, 10.949136f, 28.651943f, 10.949136f, 39.601078f, 0.0f);
        mPath.rLineTo(79.09983f, -79.09983f);
        mPath.rCubicTo(10.949136f, -10.949136f, 10.949136f, -28.651943f, 0.0f, -39.601078f);
        mPath.cubicTo(303.25012f, 698.9028f, 285.5473f, 698.9028f, 274.59818f, 709.8519f);
        mPath.lineTo(274.59818f, 709.8519f);
        mPath.close();
        mPath.moveTo(274.59818f, 709.8519f);
        mPath.moveTo(749.4018f, 314.04578f);
        mPath.rLineTo(79.09983f, -79.09983f);
        mPath.rCubicTo(10.949136f, -10.949136f, 10.949136f, -28.651943f, 0.0f, -39.601078f);
        mPath.rCubicTo(-10.949136f, -10.949136f, -28.651943f, -10.949136f, -39.601078f, 0.0f);
        mPath.lineTo(709.9031f, 274.54703f);
        mPath.rCubicTo(-10.949136f, 10.949136f, -10.949136f, 28.651943f, 0.0f, 39.601078f);
        mPath.cubicTo(720.7499f, 324.9949f, 738.4527f, 325.09723f, 749.4018f, 314.04578f);
        mPath.lineTo(749.4018f, 314.04578f);
        mPath.close();
        mPath.moveTo(749.4018f, 314.04578f);
        mPath.moveTo(749.4018f, 709.8519f);
        mPath.rCubicTo(-10.949136f, -10.949136f, -28.651943f, -10.949136f, -39.601078f, 0.0f);
        mPath.rCubicTo(-10.949136f, 10.949136f, -10.949136f, 28.651943f, 0.0f, 39.601078f);
        mPath.rLineTo(79.09983f, 79.09983f);
        mPath.rCubicTo(10.949136f, 10.949136f, 28.651943f, 10.949136f, 39.601078f, 0.0f);
        mPath.rCubicTo(10.949136f, -10.949136f, 10.949136f, -28.651943f, 0.0f, -39.601078f);
        mPath.lineTo(749.4018f, 709.8519f);
        mPath.lineTo(749.4018f, 709.8519f);
        mPath.close();
        mPath.moveTo(749.4018f, 709.8519f);
        mPath.moveTo(931.6486f, 484.01318f);
        mPath.lineTo(819.8037f, 484.01318f);
        mPath.rCubicTo(-15.451584f, 0.0f, -27.935644f, 12.58639f, -27.935644f, 27.935644f);
        mPath.rCubicTo(0.0f, 15.451584f, 12.484061f, 27.935644f, 27.935644f, 27.935644f);
        mPath.rLineTo(111.947235f, 0.0f);
        mPath.rCubicTo(15.451584f, 0.0f, 27.935644f, -12.484061f, 27.935644f, -27.935644f);
        mPath.cubicTo(959.68665f, 496.49725f, 947.1002f, 484.01318f, 931.6486f, 484.01318f);
        mPath.lineTo(931.6486f, 484.01318f);
        mPath.close();
        mPath.moveTo(931.6486f, 484.01318f);
        mPath.moveTo(288.10553f, 511.94882f);
        mPath.rCubicTo(0.0f, 123.61267f, 100.179474f, 223.79214f, 223.79214f, 223.79214f);
        mPath.rCubicTo(123.61267f, 0.0f, 223.79214f, -100.179474f, 223.79214f, -223.79214f);
        mPath.rCubicTo(0.0f, -123.61267f, -100.179474f, -223.79214f, -223.79214f, -223.79214f);
        mPath.cubicTo(388.38733f, 288.15668f, 288.10553f, 388.33615f, 288.10553f, 511.94882f);
        mPath.lineTo(288.10553f, 511.94882f);
        mPath.close();
        mPath.moveTo(288.10553f, 511.94882f);
        mPath.moveTo(512.0f, 791.7146f);
        mPath.rCubicTo(-15.451584f, 0.0f, -27.935644f, 12.484061f, -27.935644f, 27.935644f);
        mPath.rLineTo(0.0f, 111.947235f);
        mPath.rCubicTo(0.0f, 15.451584f, 12.484061f, 27.935644f, 27.935644f, 27.935644f);
        mPath.rCubicTo(15.451584f, 0.0f, 27.935644f, -12.484061f, 27.935644f, -27.935644f);
        mPath.lineTo(539.93567f, 819.75256f);
        mPath.cubicTo(539.93567f, 804.30096f, 527.4516f, 791.7146f, 512.0f, 791.7146f);
        mPath.lineTo(512.0f, 791.7146f);
        mPath.close();
        mPath.moveTo(512.0f, 791.7146f);
        mPath.moveTo(512.0f, 791.7146f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        if (mFillPaint == null) {
            mFillPaint = new Paint();
            mFillPaint.setStyle(Paint.Style.FILL);
            mFillPaint.setAntiAlias(true);
        }
        mFillPaint.setColor(applyAlpha(-13882324, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);

    }

}